import { initializeBot } from '../src/bot/index.js';
import neynarService from '../src/services/neynar.js';
import contentGenerator from '../src/services/contentGenerator.js';
import config from '../src/config/index.js';
import { KEYWORDS } from '../src/jobs/scheduler.js';

// Fonction pour ex√©cuter les tests
async function runTests() {
  try {
    console.log('=== CLIPPY BOT FUNCTION TESTER ===');
    console.log('Configuration actuelle:');
    console.log(`  API Key Neynar: ${config.neynar.apiKey.substring(0, 8)}...`);
    console.log(`  Signer UUID: ${config.neynar.signerUuid}`);
    console.log(`  Bot FID: ${config.bot.fid}`);
    console.log('-'.repeat(40));

    // Initialiser le bot
    console.log('Initialisation du bot...');
    const bot = await initializeBot();
    console.log('‚úÖ Bot initialis√© avec succ√®s!');

    // Menu des tests disponibles
    const argv = process.argv.slice(2);
    const testChoice = argv[0] || 'menu';
    const param = argv[1];

    if (testChoice === 'menu' || testChoice === 'help') {
      showMenu();
      process.exit(0);
    }

    // Ex√©cuter le test s√©lectionn√©
    await runSelectedTest(testChoice, param, bot);

  } catch (error) {
    console.error('‚ùå ERREUR:', error);
    process.exit(1);
  }
}

function showMenu() {
  console.log(`
Utilisation: node test/function-tester.js [test] [param√®tre]

Tests disponibles:
  publish         - Tester la publication d'un message
  reply [hash]    - Tester la r√©ponse √† un cast (hash en param√®tre)
  keywords [n]    - Rechercher et r√©pondre aux mots-cl√©s (n = nombre)
  follow [fid]    - Suivre un utilisateur sp√©cifique (FID en param√®tre)
  follow-auto [n] - Suivre n utilisateurs automatiquement
  like [hash]     - Liker un cast sp√©cifique (hash en param√®tre)
  like-auto [n]   - Liker n casts automatiquement
  search [mot]    - Rechercher des casts avec un mot-cl√©
  check           - V√©rifier la configuration et la connectivit√©
  
Exemples:
  node test/function-tester.js publish
  node test/function-tester.js follow 123456
  node test/function-tester.js keywords 3
  `);
}

async function runSelectedTest(test, param, bot) {
  console.log(`Ex√©cution du test: ${test}${param ? ` avec param√®tre: ${param}` : ''}`);
  
  switch (test) {
    case 'publish':
      await testPublish(bot);
      break;
    case 'reply':
      if (!param) {
        console.error('‚ùå Param√®tre requis: hash du cast √† r√©pondre');
        process.exit(1);
      }
      await testReply(bot, param);
      break;
    case 'keywords':
      const limit = parseInt(param, 10) || 3;
      await testKeywords(bot, limit);
      break;
    case 'follow':
      if (!param) {
        console.error('‚ùå Param√®tre requis: FID de l\'utilisateur √† suivre');
        process.exit(1);
      }
      await testFollow(param);
      break;
    case 'follow-auto':
      const followCount = parseInt(param, 10) || 2;
      await testFollowAuto(bot, followCount);
      break;
    case 'like':
      if (!param) {
        console.error('‚ùå Param√®tre requis: hash du cast √† liker');
        process.exit(1);
      }
      await testLike(param);
      break;
    case 'like-auto':
      const likeCount = parseInt(param, 10) || 3;
      await testLikeAuto(bot, likeCount);
      break;
    case 'search':
      if (!param) {
        console.error('‚ùå Param√®tre requis: mot-cl√© √† rechercher');
        process.exit(1);
      }
      await testSearch(param);
      break;
    case 'check':
      await testConnection();
      break;
    default:
      console.error(`‚ùå Test inconnu: ${test}`);
      showMenu();
      process.exit(1);
  }
}

async function testPublish(bot) {
  console.log('üìù Test de publication...');
  try {
    const post = await contentGenerator.generatePost();
    console.log(`Post g√©n√©r√©: "${post}"`);
    
    const result = await neynarService.publishCast(post);
    console.log('‚úÖ Publication r√©ussie!');
    console.log(`Hash du cast: ${result.hash}`);
    console.log(`URL: https://warpcast.com/~/conversations/${result.hash}`);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur lors de la publication:', error.message);
    if (error.response && error.response.data) {
      console.error('D√©tails:', JSON.stringify(error.response.data, null, 2));
    }
    throw error;
  }
}

async function testReply(bot, castHash) {
  console.log(`üí¨ Test de r√©ponse au cast ${castHash}...`);
  try {
    const reply = await contentGenerator.generateReply("Test de r√©ponse automatique");
    console.log(`R√©ponse g√©n√©r√©e: "${reply}"`);
    
    const result = await neynarService.replyToCast(reply, castHash);
    console.log('‚úÖ R√©ponse publi√©e avec succ√®s!');
    console.log(`Hash de la r√©ponse: ${result.hash}`);
    console.log(`URL: https://warpcast.com/~/conversations/${result.hash}`);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©ponse:', error.message);
    if (error.response && error.response.data) {
      console.error('D√©tails:', JSON.stringify(error.response.data, null, 2));
    }
    throw error;
  }
}

async function testKeywords(bot, limit) {
  console.log(`üîç Test de recherche et r√©ponse √† ${limit} casts par mots-cl√©s...`);
  try {
    const results = await bot.searchAndRespondToKeywords(KEYWORDS, limit);
    console.log(`‚úÖ R√©pondu √† ${results.length} casts avec succ√®s!`);
    results.forEach((cast, i) => {
      console.log(`${i+1}. Cast original: "${cast.text?.substring(0, 50)}..."`);
    });
    return results;
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche par mots-cl√©s:', error.message);
    throw error;
  }
}

async function testFollow(fid) {
  console.log(`üë§ Test de follow de l'utilisateur FID: ${fid}...`);
  try {
    // V√©rifier si d√©j√† suivi
    const isFollowing = await neynarService.checkIfFollowing(fid);
    console.log(`√âtat actuel: ${isFollowing ? 'D√©j√† suivi' : 'Pas encore suivi'}`);
    
    if (isFollowing) {
      console.log('Utilisateur d√©j√† suivi, on va le unfollow d\'abord pour tester...');
      await neynarService.unfollowUser(fid);
      console.log('‚úÖ Unfollow r√©ussi.');
    }
    
    // Tester le follow
    console.log('Tentative de follow...');
    const result = await neynarService.followUser(fid);
    console.log('‚úÖ Follow r√©ussi!');
    console.log('R√©sultat:', JSON.stringify(result, null, 2));
    
    // V√©rifier que le follow a bien √©t√© pris en compte
    const newFollowStatus = await neynarService.checkIfFollowing(fid);
    console.log(`V√©rification apr√®s follow: ${newFollowStatus ? 'Suivi confirm√©' : 'NON SUIVI (ERREUR)'}`);
    
    return result;
  } catch (error) {
    console.error('‚ùå Erreur lors du follow:', error.message);
    if (error.response && error.response.data) {
      console.error('D√©tails:', JSON.stringify(error.response.data, null, 2));
    }
    throw error;
  }
}

async function testFollowAuto(bot, count) {
  console.log(`üë• Test de follow automatique de ${count} utilisateurs...`);
  try {
    const followedCount = await bot.followRelevantUsers(count);
    console.log(`‚úÖ Suivi ${followedCount} utilisateurs avec succ√®s!`);
    return followedCount;
  } catch (error) {
    console.error('‚ùå Erreur lors du follow automatique:', error.message);
    throw error;
  }
}

async function testLike(castHash) {
  console.log(`üëç Test de like du cast ${castHash}...`);
  try {
    // V√©rifier si d√©j√† lik√©
    const isLiked = await neynarService.isCastLiked(castHash);
    console.log(`√âtat actuel: ${isLiked ? 'D√©j√† lik√©' : 'Pas encore lik√©'}`);
    
    if (isLiked) {
      console.log('Cast d√©j√† lik√©, on va l\'unliker d\'abord pour tester...');
      await neynarService.unlikeCast(castHash);
      console.log('‚úÖ Unlike r√©ussi.');
    }
    
    // Tester le like
    console.log('Tentative de like...');
    const result = await neynarService.likeCast(castHash);
    console.log('‚úÖ Like r√©ussi!');
    console.log('R√©sultat:', JSON.stringify(result, null, 2));
    
    return result;
  } catch (error) {
    console.error('‚ùå Erreur lors du like:', error.message);
    if (error.response && error.response.data) {
      console.error('D√©tails:', JSON.stringify(error.response.data, null, 2));
    }
    throw error;
  }
}

async function testLikeAuto(bot, count) {
  console.log(`üëç Test de like automatique de ${count} casts...`);
  try {
    const likedCount = await bot.likeRecentCasts(count, KEYWORDS);
    console.log(`‚úÖ Lik√© ${likedCount} casts avec succ√®s!`);
    return likedCount;
  } catch (error) {
    console.error('‚ùå Erreur lors du like automatique:', error.message);
    throw error;
  }
}

async function testSearch(keyword) {
  console.log(`üîç Recherche de casts avec le mot-cl√© "${keyword}"...`);
  try {
    const casts = await neynarService.searchCasts(keyword, 5);
    console.log(`‚úÖ Trouv√© ${casts.length} casts!`);
    
    casts.forEach((cast, i) => {
      console.log(`\n${i+1}. Cast par @${cast.author.username}:`);
      console.log(`   Hash: ${cast.hash}`);
      console.log(`   Texte: ${cast.text.substring(0, 100)}${cast.text.length > 100 ? '...' : ''}`);
      console.log(`   URL: https://warpcast.com/~/conversations/${cast.hash}`);
    });
    
    return casts;
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche:', error.message);
    throw error;
  }
}

async function testConnection() {
  console.log('üîå Test de connectivit√©...');
  try {
    // V√©rifier l'API Neynar
    console.log('V√©rification de l\'API Neynar...');
    const testUser = await neynarService.getUserByFid(config.bot.fid);
    console.log(`‚úÖ API Neynar OK! Bot identifi√© comme: @${testUser.username}`);
    console.log(`   FID: ${testUser.fid}`);
    console.log(`   Nom: ${testUser.display_name}`);
    console.log(`   Adresse: ${testUser.custody_address}`);
    
    // V√©rifier la g√©n√©ration de contenu
    console.log('\nV√©rification du g√©n√©rateur de contenu...');
    const testPost = await contentGenerator.generatePost();
    console.log(`‚úÖ G√©n√©ration de contenu OK! Exemple: "${testPost}"`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de connectivit√©:', error.message);
    throw error;
  }
}

// Ex√©cuter les tests
runTests();
